name: Build and Deploy to Kubernetes

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build:
    if: github.event.pull_request.merged == true
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1

      - name: Build, tag, and push images to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_MYSQL: mysql-repo
          ECR_REPOSITORY_WEBAPP: webapp-repo
          IMAGE_TAG: v1.0
        run: |
          # Build images
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_MYSQL:$IMAGE_TAG -f Dockerfile_mysql .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG -f Dockerfile .

          # Push images to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_MYSQL:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG

      - name: Setting up key file for SSH connection to EC2
        run: |
          echo "${{ secrets.SSH_KEY_FILE }}" > ./key_file.pem
          chmod 400 ./key_file.pem

      - name: Update Kubernetes manifests with ECR registry
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          MANIFEST_FILES="k8s/*.yaml"

          for file in $MANIFEST_FILES; do
            sed -i "s|\${ECR_REGISTRY}|$ECR_REGISTRY|g" $file
          done

      - name: Deploy to Kubernetes cluster on EC2
        run: |
          # SSH into EC2 instance and deploy to Kubernetes
          ssh -i key_file.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_INSTANCE_ID }} <<EOF
            echo "Connected to EC2 successfully"

            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
            echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            echo "aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}" >> ~/.aws/credentials
            echo "region=us-east-1" >> ~/.aws/credentials
            chmod 600 ~/.aws/credentials

            # Login to AWS ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # Create temporary directory for manifests
            mkdir -p ~/k8s-deploy
            
            # Make sure the kind cluster is running
            kind get clusters || kind create cluster --name assignment2
            
            # Set KUBECONFIG
            export KUBECONFIG=~/.kube/config
          EOF

          # Copy Kubernetes manifests to EC2
          scp -i key_file.pem -o StrictHostKeyChecking=no k8s/*.yaml ec2-user@${{ secrets.EC2_INSTANCE_ID }}:~/k8s-deploy/

          # Apply Kubernetes manifests
          ssh -i key_file.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_INSTANCE_ID }} <<EOF
            # Create namespaces first
            kubectl apply -f ~/k8s-deploy/namespaces.yaml
            
            # Apply MySQL manifests
            kubectl apply -f ~/k8s-deploy/mysql-pod.yaml
            kubectl apply -f ~/k8s-deploy/mysql-replicaset.yaml
            kubectl apply -f ~/k8s-deploy/mysql-deployment.yaml
            kubectl apply -f ~/k8s-deploy/mysql-service.yaml
            
            # Apply Web application manifests
            kubectl apply -f ~/k8s-deploy/webapp-pod.yaml
            kubectl apply -f ~/k8s-deploy/webapp-replicaset.yaml
            kubectl apply -f ~/k8s-deploy/webapp-deployment.yaml
            kubectl apply -f ~/k8s-deploy/webapp-service.yaml
            
            # Verify deployments
            echo "MySQL deployment:"
            kubectl get pods -n mysql-ns
            
            echo "Web application deployment:"
            kubectl get pods -n webapp-ns
            
            echo "Services:"
            kubectl get svc -A | grep -E 'mysql|webapp'
            
            # Get NodePort access information
            NODEPORT_IP=$(hostname -I | awk '{print $1}')
            echo "Web application is accessible at: http://$NODEPORT_IP:30000"
          EOF

      - name: Update Web Application (Version Rollout)
        if: github.event.pull_request.merged == true && contains(github.event.pull_request.title, 'update-webapp')
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_WEBAPP: webapp-repo
          NEW_IMAGE_TAG: v2.0
        run: |
          # Build and push new version of webapp
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$NEW_IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$NEW_IMAGE_TAG

          # Update the deployment file with new image version
          sed -i "s|v1.0|$NEW_IMAGE_TAG|g" k8s/updated-webapp-deployment.yaml
          sed -i "s|\${ECR_REGISTRY}|$ECR_REGISTRY|g" k8s/updated-webapp-deployment.yaml

          # Copy updated deployment file to EC2
          scp -i key_file.pem -o StrictHostKeyChecking=no k8s/updated-webapp-deployment.yaml ec2-user@${{ secrets.EC2_INSTANCE_ID }}:~/k8s-deploy/

          # Apply the updated deployment
          ssh -i key_file.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_INSTANCE_ID }} <<EOF
            # Apply updated webapp deployment
            kubectl apply -f ~/k8s-deploy/updated-webapp-deployment.yaml
            
            # Wait for rollout to complete
            kubectl rollout status deployment/webapp-deployment -n webapp-ns
            
            # Verify new deployment
            echo "Updated Web application deployment:"
            kubectl get pods -n webapp-ns
            kubectl describe deployment webapp-deployment -n webapp-ns | grep Image
          EOF
